name: Build and Release on All Platforms

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:  # Allow manual triggering

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag_name: ${{ steps.create_release.outputs.tag_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set Release Tag
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "::set-output name=TAG_NAME::v$(date +'%Y.%m.%d.%H%M%S')"
        id: set_tag
        shell: bash

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event_name == 'workflow_dispatch' && steps.set_tag.outputs.TAG_NAME || github.ref_name }}
          release_name: Release ${{ github.event_name == 'workflow_dispatch' && steps.set_tag.outputs.TAG_NAME || github.ref_name }}
          draft: false
          prerelease: false

  build-windows:
    needs: create_release
    runs-on: windows-latest
    env:
      UPLOAD_URL: ${{ needs.create_release.outputs.upload_url }}
      TAG_NAME: ${{ needs.create_release.outputs.tag_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Publish
        run: dotnet publish --configuration Release --no-build --runtime win-x64 --self-contained true --output ./publish

      - name: Compress Published Files
        run: Compress-Archive -Path ./publish/* -DestinationPath ./myapp-windows.zip

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ./myapp-windows.zip
          asset_name: myapp-windows.zip
          asset_content_type: application/zip

  build-linux:
    needs: create_release
    runs-on: ubuntu-latest
    env:
      UPLOAD_URL: ${{ needs.create_release.outputs.upload_url }}
      TAG_NAME: ${{ needs.create_release.outputs.tag_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Publish
        run: dotnet publish --configuration Release --no-build --runtime linux-x64 --self-contained true --output ./publish

      - name: Compress Published Files
        run: zip -r myapp-linux.zip ./publish/*

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ./myapp-linux.zip
          asset_name: myapp-linux.zip
          asset_content_type: application/zip

  build-macos:
    needs: create_release
    runs-on: macos-latest
    env:
      UPLOAD_URL: ${{ needs.create_release.outputs.upload_url }}
      TAG_NAME: ${{ needs.create_release.outputs.tag_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Publish
        run: dotnet publish --configuration Release --no-build --runtime osx-x64 --self-contained true --output ./publish

      - name: Compress Published Files
        run: zip -r myapp-macos.zip ./publish/*

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ./myapp-macos.zip
          asset_name: myapp-macos.zip
          asset_content_type: application/zip
